var UI = require("ui");
var Settings = require("settings");
var Clay = require("clay");
var clayConfig = require("config");
var clay = new Clay(clayConfig, null, {autoHandleEvents: false});
var ajax = require("ajax");

var token = "";
var contacts = [];

var configPromptCard = new UI.Card({
    fullscreen: false,
    title: "Hello, DigiDuncan!",
    titleColor: "black"
});

var errorCard = new UI.Card({
    fullscreen: false,
    title: "Something went wrong:",
    subtitle: "Digi doesn't know JS!",
    titleColor: "black",
    backgroundColor: "yellow"
});

var loadingCard = new UI.Card({
    fullscreen: false,
    title: "Gettings contacts...",
    titleColor: "black"
});

var sendingMessageCard = new UI.Card({
    fullscreen: false,
    title: "Sending...",
    titleColor: "black",
    backgroundColor: "#aaaaaa"
});

var sentMessageCard = new UI.Card({
    fullscreen: false,
    title: "Message sent :)",
    titleColor: "black",
    backgroundColor: "#aaaaaa"
});

var contactsMenu = new UI.Menu({
    fullscreen:false,
    backgroundColor: "white",
    textColor: "black",
    highlightBackgroundColor: "liberty",
    highlightTextColor: "black"
});

var responsesMenu = new UI.Menu({
    fullscreen:false,
    backgroundColor: "white",
    textColor: "black",
    highlightBackgroundColor: "liberty",
    highlightTextColor: "black",
    sections: [
        {items: [
            {title: Settings.option("response1")},
            {title: Settings.option("response2")},
            {title: Settings.option("response3")}
        ]}
    ]
});

// eslint-disable-next-line no-unused-vars
Pebble.addEventListener("showConfiguration", function(e) {
    Pebble.openURL(clay.generateUrl());
    console.log("showed settings");
});

var populateContactsMenu = function(arrayContacts){
    for(var i = 0; i < arrayContacts.length; i++){
        var contact = arrayContacts[i];

        var name = "";

        if(contact.name){
            name = contact.name;
        }
        else{
            var lastIndex = contact.recipients.length - 1;
            for(var j = 0; j < contact.recipients.length; j++){
                name += contact.recipients[j].username;
                if(j < lastIndex){
                    name += ", ";
                }
            }
        }

        if(contacts[i]) {
            contactsMenu.item(0, i, { title: name });
        }
    }
};

// eslint-disable-next-line no-unused-vars
var getContacts = function(arrayContacts, token){
    console.log("getting contacts");

    var ajaxURL = "https://discord.com/api/users/@me/channels";
    var ajaxHeaders = { "Authorization" : Settings.option("token")};
    var ajaxParams = { url: ajaxURL, type: "json", method: "get", headers: ajaxHeaders };

    ajax(ajaxParams, function(data){
        console.log("getting contacts succeeded!");
        contacts = data;

        // sort contacts based on who messaged last
        contacts.sort(function(a, b){
            //using last_message_id, we can derive time the last message was sent
            //as discord tokens are partially generated by timestamp
            var a_id = parseInt(a.last_message_id, 10);
            var b_id = parseInt(b.last_message_id, 10);
            return b_id - a_id;
        });

        Settings.data("contacts", contacts);

        populateContactsMenu(contacts);
        contactsMenu.show();
    }, function(data){
        console.log("getting contacts failed" + JSON.stringify(data) );
        errorCard.body = "" + data;
        errorCard.show();
    });
};

Pebble.addEventListener("webviewclosed", function(e) {
    if (e && !e.response) {
        console.log(JSON.stringify(e, null, 4));
        return;
    }

    var dict = clay.getSettings(e.response);
    Settings.option(dict);
    Settings.option("token", Settings.option("token").replace(/['"]+/g, ""));
    console.log("set settings");
    console.log(Settings.option("response1"));

    getContacts(contacts, Settings.option("token"));
    loadingCard.show();
});

contacts = Settings.data("contacts");
token = Settings.option("token");

if(token && contacts && contacts.length){
    populateContactsMenu(contacts);
    contactsMenu.show();
    configPromptCard.hide();
    errorCard.hide();
    loadingCard.hide();
}
else{
    configPromptCard.show();
}

var selectedContact;

contactsMenu.on("select", function(selection){
    selectedContact = contacts[selection.itemIndex];
    responsesMenu.show();
});

responsesMenu.on("select", function(selection){
    var message = selection.item.title;
    console.log(message);
    console.log("sending message");

    var ajaxURL = "https://discordapp.com/api/channels/" + selectedContact.id + "/messages";
    var ajaxHeaders = { "Authorization" : token };
    var ajaxData = { "content" : message };
    var ajaxParams = { url: ajaxURL, type: "json",
        method: "post", data: ajaxData, headers: ajaxHeaders };

    // eslint-disable-next-line no-unused-vars
    ajax(ajaxParams, function(data){
        console.log("message sent!");
        sentMessageCard.show();
    }, function(error){
        console.log("sending message failed" + JSON.stringify(error) );
        errorCard.body = "" + error;
        errorCard.show();
    });

    sendingMessageCard.show();
});

errorCard.on("show", function(){
    loadingCard.hide();
    contactsMenu.hide();
    responsesMenu.hide();
    sendingMessageCard.hide();
});

loadingCard.on("show", function(){
    configPromptCard.hide();
});

contactsMenu.on("show", function(){
    loadingCard.hide();
});

sentMessageCard.on("show", function(){
    contactsMenu.hide();
    responsesMenu.hide();
    sendingMessageCard.hide();

    setTimeout(() => {

        contactsMenu.show();
        sentMessageCard.hide();

    }, 1000);
});

// var ws = new WebSocket("wss://gateway.discord.gg/?encoding=json&v=7");
//
// ws.addEventListener('open', function (event) {
// 	console.log("Connected!");
// });
//
// ws.addEventListener('message', function (event) {
// 	var data = JSON.parse(event.data);
//
// 	if(data.t === "READY"){
// 		console.log("Ready!");
// 		serverMenu.show();
// 		loadingCard.hide();
// 		if(!isABot){
// 			console.log(JSON.stringify(data.d.guilds));
// 			servers = data.d.guilds;
// 			dmChannels = data.d.private_channels;
// 			serverMenu.item(0, 0, {title: "Messages", subtitle: "Direct messages"});
// 			for(var i = 0; i < servers.length; i++){
// 				serverMenu.item(1, i, {title: data.d.guilds[i].name});
// 			}
// 		}
// 	}
//
// 	if(data.t === "MESSAGE_CREATE"){
// 		setTimeout(function(){
// 			console.log("New Message! Currently in chat list: " + inChatList);
// 			if(data.d.channel_id == selectedChannel && inChatList){
// 				Motor.vibrate('short');
// 				messages.unshift(data.d);
// 				var cardBody = "";
// 				chatList.title(messages[0].author.username + ":");
// 				chatList.subtitle(messages[0].content);
// 				for(var i = 1; i < messages.length; i++)
// 					cardBody += messages[i].author.username + ":\n" + messages[i].content + "\n";
// 				if(cardBody.length > 433 - messages[0].author.username.length - messages[0].content.length);
// 				chatList.body(cardBody.substring(0, 410 - messages[0].author.username.length - messages[0].content.length) + "...");
// 				console.log("Length of chat card: " + (410 - messages[0].author.username.length - messages[0].content.length + 3));
// 			}
// 		}, 500);
// 	}
//
// 	if(data.t === "GUILD_CREATE" && isABot){
// 		console.log("Got Server: " + data.d.name);
// 		serverMenu.item(0, servers.length, {title: data.d.name});
// 		servers.push(data.d);
// 	}
// 	console.log(event.data);
// 	console.log(JSON.stringify(event));
// 	if(data.op === 10){
// 		console.log("Heartbeat: " + data.d.heartbeat_interval);
// 		console.log("Sent Auth!");
// 		ws.send(JSON.stringify({
// 			"op": 2,
// 			"d": {
// 				"token": token,
// 				"properties": {
// 					"$browser": "pebble",
// 				},
// 				"large_threshold": 50,
// 			}
// 		}));
//
// 		setInterval(function(){
// 			console.log("Sent heartbeat!");
// 			ws.send(JSON.stringify({"op": 1, "d":null}));
// 		}, data.d.heartbeat_interval - 500);
// 	}
// });
